name: Nightly Build

# This schedule triggers the workflow to run at 12:00 AM UTC every day.
on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch: # This allows manual triggering as well
  
env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write  # Required to create and update releases
  packages: write  # Required to upload assets
  deployments: write
  issues: write

jobs:
  delete-old-builds:
    runs-on: ubuntu-latest
    steps:
    - name: Delete old nightly builds and keep last 3
      run: |
        # Get the list of all nightly build tags, sorted by creation date
        tags=$(gh api -X GET repos/${{ github.repository }}/tags | jq -r '.[] | select(.name | startswith("nightly-build-")) | .name' | sort)

        # Calculate how many tags to delete, keeping the last 3
        tags_count=$(echo "$tags" | wc -l)
        tags_to_delete_count=$((tags_count - 2))

        if [ "$tags_to_delete_count" -gt 0 ]; then
          # Get the tags to delete
          tags_to_delete=$(echo "$tags" | head -n $tags_to_delete_count)
          echo "Tags to delete: $tags_to_delete"
          for tag in $tags_to_delete; do
            # Delete the tag
            gh api -X DELETE repos/${{ github.repository }}/git/refs/tags/$tag

            # Find the corresponding release and delete it
            release_id=$(gh api -X GET repos/${{ github.repository }}/releases | jq -r --arg TAG "$tag" '.[] | select(.tag_name == $TAG) | .id')
            if [ ! -z "$release_id" ]; then
              gh api -X DELETE repos/${{ github.repository }}/releases/$release_id
            fi
          done
        else
          echo "No old tags to delete."
        fi
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install GTK and VTE dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends \
            libgtk-4-dev \
            libglib2.0-dev \
            libpango1.0-dev \
            libcairo2-dev \
            libgdk-pixbuf-2.0-dev \
            pkg-config \
            libvte-2.91-dev \
            libvte-2.91-gtk4-dev \
            build-essential \
            cmake \
            git

      - name: Set PKG_CONFIG_PATH
        run: echo "PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/share/pkgconfig:/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV

      - name: Verify pkg-config for vte-2.91-gtk4
        run: pkg-config --modversion vte-2.91-gtk4

      - name: Cache Cargo registry, git, and target
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: cargo-cache-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cargo-cache-${{ runner.os }}-

      - name: Check dependencies
        run: cargo check

      - name: Build
        run: cargo build --release

      - name: Run tests
        run: cargo test
      
      - name: List files for debugging
        run: |
          echo "Listing target/release:"
          ls -R target/release

      - name: Make binary executable
        run: chmod +x target/release/termint
      - name: Prepare ZIP file
        run: |
          mkdir release
          cp target/release/termint release/
          cd release
          zip -r ../nightly-build.zip .

      - name: Set up Git User
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"

      - name: Set Date and Tag Name
        id: date_and_tag
        run: |
          echo "BUILD_DATE=$(date +'%Y-%m-%d')" >> $GITHUB_ENV
          echo "TAG_NAME=nightly-build-$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV

      - name: Debugging before tagging
        run: |
          echo "Tag name is: ${{ env.TAG_NAME }}"
          echo "Build date is: ${{ env.BUILD_DATE }}"
          git status
          git branch -a
          git log -n 5
          git tag -l

      - name: Create Tag
        run: |
          if [ -z "${{ env.TAG_NAME }}" ]; then
            echo "TAG_NAME is empty! Exiting..."
            exit 1
          fi
          git tag -a "${{ env.TAG_NAME }}" -m "Nightly build ${{ env.BUILD_DATE }}" || (echo "Tag creation failed"; exit 1)

      - name: Push Tag
        run: git push origin "${{ env.TAG_NAME }}" || (echo "Tag push failed"; exit 1)

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG_NAME }}
          name: "Nightly Build ${{ env.BUILD_DATE }}"
          draft: false
          prerelease: true
          files: nightly-build.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
